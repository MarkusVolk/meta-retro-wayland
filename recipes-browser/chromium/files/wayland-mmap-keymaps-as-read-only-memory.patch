From: Nick Diego Yamane <nickdiego@igalia.com>
Date: Mon, 25 Oct 2021 18:45:36 +0000
Subject: [PATCH] wayland: mmap keymaps as read-only memory

Wayland compositors are supposed to share keyboard keymaps with clients
through read-only memory. That was only recently formalized in the
protocol specs [1], and not all compositors comply with that yet, eg:
Gnome Shell 40 and Exo use writable memory. That makes current
ozone/wayland implementation, which relies on base::SharedMemory APIs,
to fail to map it at client side, due to strict checks about read/write
modes matching intentionally present in base's SharedMemoryRegion code,
etc.

To address it, this switches WaylandKeyboard::Keymap() impl back to use
raw posix mmap/munmap function calls, with PROT_READ mode, so ensuring
it works with both read-only and writable keymap descriptors.

[1] https://gitlab.freedesktop.org/wayland/wayland/-/merge_requests/176

R=tonikitoo@igalia.com

Bug: 1246834
Test: `chrome --ozone-platform=wayland` must launch successfully with different compositors.
Change-Id: I568b2ca67407556d7dec8978439f6858368fdef2
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3241224
Reviewed-by: Alex Ilin <alexilin@chromium.org>
Reviewed-by: Antonio Gomes <tonikitoo@igalia.com>
Commit-Queue: Nick Yamane <nickdiego@igalia.com>
Cr-Commit-Position: refs/heads/main@{#934615}
---

diff --git a/ui/ozone/platform/wayland/host/wayland_keyboard.cc b/ui/ozone/platform/wayland/host/wayland_keyboard.cc
index e1523db..7c575f9 100644
--- a/ui/ozone/platform/wayland/host/wayland_keyboard.cc
+++ b/ui/ozone/platform/wayland/host/wayland_keyboard.cc
@@ -4,11 +4,14 @@
 
 #include "ui/ozone/platform/wayland/host/wayland_keyboard.h"
 
+#include <sys/mman.h>
+
+#include <cstddef>
+#include <cstring>
 #include <utility>
 
-#include "base/files/scoped_file.h"
 #include "base/logging.h"
-#include "base/memory/unsafe_shared_memory_region.h"
+#include "base/memory/ref_counted_memory.h"
 #include "base/unguessable_token.h"
 #include "ui/base/buildflags.h"
 #include "ui/events/base_event_utils.h"
@@ -112,26 +115,26 @@
 void WaylandKeyboard::Keymap(void* data,
                              wl_keyboard* obj,
                              uint32_t format,
-                             int32_t keymap_fd,
+                             int32_t fd,
                              uint32_t size) {
   WaylandKeyboard* keyboard = static_cast<WaylandKeyboard*>(data);
   DCHECK(keyboard);
 
-  base::ScopedFD fd(keymap_fd);
-  auto length = size - 1;
-  auto shmen = base::subtle::PlatformSharedMemoryRegion::Take(
-      std::move(fd), base::subtle::PlatformSharedMemoryRegion::Mode::kUnsafe,
-      length, base::UnguessableToken::Create());
-  auto mapped_memory =
-      base::UnsafeSharedMemoryRegion::Deserialize(std::move(shmen)).Map();
-  const char* keymap = mapped_memory.GetMemoryAs<char>();
-
-  if (!keymap || format != WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1)
+  if (!data || format != WL_KEYBOARD_KEYMAP_FORMAT_XKB_V1)
     return;
 
-  bool success = keyboard->layout_engine_->SetCurrentLayoutFromBuffer(
-      keymap, mapped_memory.size());
-  DCHECK(success) << "Failed to set the XKB keyboard mapping.";
+  void* keymap = mmap(nullptr, size, PROT_READ, MAP_SHARED, fd, 0);
+  if (keymap == MAP_FAILED) {
+    DPLOG(ERROR) << "Failed to map XKB keymap.";
+    return;
+  }
+
+  const char* keymap_string = static_cast<const char*>(keymap);
+  if (!keyboard->layout_engine_->SetCurrentLayoutFromBuffer(
+          keymap_string, strnlen(keymap_string, size))) {
+    DLOG(ERROR) << "Failed to set XKB keymap.";
+  }
+  munmap(keymap, size);
 }
 
 void WaylandKeyboard::Enter(void* data,
 
